#HeaderRevision 0
#
# File generated by...
# program:      StateDMI 3.08.00 (2009-06-01)
# user:         sam
# date:         Tue Jun 02 16:55:26 MDT 2009
# host:         SOPRIS
# directory:    C:\Develop\StateDMI_SourceBuild\StateDMI\test\regression\commands\CheckReservoirRights
# command line: StateDMI -home test\operational\CDSS
#----
# 
# StateMod reservoir rights as a delimited list file.
# 
# -----------------------------------------------------------------------
# Command file name: "C:\Develop\StateDMI_SourceBuild\StateDMI\test\regression\commands\CheckReservoirRights\Test_CheckReservoirRights.StateDMI"
# Commands: 
# # Test check reservoir rights data where each checked value is in error
# # The set command won't let invalid data be set from parameters so read bad data
# # to trigger the check warnings.
# # Compare the data csv to make sure the data are being produced as expected
# # and the check file csv to make sure the checks are working.
# # The expected status is Warning because the check will detect the missing values.
# #@expectedStatus Warning
# StartLog(LogFile="Results/Test_CheckReservoirRights.StateDMI.log")
# RemoveFile(InputFile="Results\Test_CheckReservoirRights_out.csv",IfNotFound=Ignore)
# RemoveFile(InputFile="Results\Test_CheckReservoirRights_out_check.csv",IfNotFound=Ignore)
# RemoveFile(InputFile="Results\Test_CheckReservoirRights_out_check.html",IfNotFound=Ignore)
# # Define a diversion station to trigger the check of stations
# SetReservoirStation(ID="Reservoir1",IfNotFound=Add)
# SetReservoirRight(ID="Location1",IfNotFound=Add)
# # Also read some bad data...
# ReadReservoirRightsFromStateMod(InputFile="Data\simple.rer")
# # Uncomment the following command to regenerate the expected results.
# WriteReservoirRightsToList(OutputFile="ExpectedResults/Test_CheckReservoirRights_out.csv")
# WriteReservoirRightsToList(OutputFile="Results/Test_CheckReservoirRights_out.csv")
# CompareFiles(InputFile1="ExpectedResults/Test_CheckReservoirRights_out.csv",InputFile2="Results/Test_CheckReservoirRights_out.csv",WarnIfDifferent=True)
# #
# # Check the data and create the check file.
# CheckReservoirRights(ID="*")
# # Uncomment the following command to regenerate the expected results.
# # WriteCheckFile(OutputFile="ExpectedResults/Test_CheckReservoirRights_out_check.csv")
# WriteCheckFile(OutputFile="Results/Test_CheckReservoirRights_out_check.csv")
# WriteCheckFile(OutputFile="Results/Test_CheckReservoirRights_out_check.html")
# CompareFiles(InputFile1="ExpectedResults/Test_CheckReservoirRights_out_check.csv",InputFile2="Results/Test_CheckReservoirRights_out_check.csv",WarnIfDifferent=True)
# 
# -----------------------------------------------------------------------------
# HydroBase database is: HydroBase on hbserver
# HydroBase.db_version:  design version: 20080701  last data change: 20080901
# HydroBase table structure for software is at least 2007052520070525
# HydroBase input name is "".
# Stored procedures are being used.
# -----------------------------------------------------------------------------
# 
#------------------------------------------------
"RIGHT ID","RIGHT NAME","RESERVOIR STATION ID ASSOC. W/ RIGHT","ADMINISTRATION NUMBER","DECREE AMOUNT (ACFT)","ON/OFF SWITCH","ACCOUNT DISTRIBUTION","RIGHT TYPE","FILL TYPE","OUT OF PRIORITY RIGHT"
363543.01,,,,0.0,0,0,0,0,
363543.02,GREEN_MOUNTAIN_RESERVOIR,999999,-8628.00001,-6316.0,1943,-5,-1,-2,
363543.03,GREEN_MOUNTAIN-refill,363543,50403.49309,154645.0,1943,-5,1,2,
363543.04,GREEN_MOUNTAIN_RES_Exch,363543,38628.00000,154645.0,1,-5,1,2,
363570.01,CON_HOOSIER_RES-orig,363570,35927.00001,10000.0,1,1,1,1,
363570.02,CON_HOOSIER_RES-free,363570,99999.99999,10000.0,1,1,1,2,
Location1,,,99999,0.0,1,1,1,1,
