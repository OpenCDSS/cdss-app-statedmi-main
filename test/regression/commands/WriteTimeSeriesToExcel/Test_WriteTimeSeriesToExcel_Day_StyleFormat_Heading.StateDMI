# Test writing a daily time series to an Excel file
# TODO SAM 2015-03-04 Need to read result and do comparison to validate
# - Format cell colors for missing, negative, zero using styles
# - Format heading columns using style format
# Failure because have an issue requestion null properties in expansion
# TODO SAM 2015-07-15 need to resolve this issue
#@expectedStatus Failure
StartLog(LogFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading.TSTool.log")
RemoveFile(InputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_out.xlsx",IfNotFound=Ignore)
NewPatternTimeSeries(Alias="ts0",NewTSID="ts0..Example.Day",Description="Test data 0 - no properties",SetStart="1950-01-01",SetEnd="1951-03-12",Units="CFS",PatternValues="-5,10,12,,0,1,7")
NewPatternTimeSeries(Alias="ts1",NewTSID="ts1..Example.Day",Description="Test data 1 - integer properties",SetStart="1950-01-01",SetEnd="1951-03-12",Units="CFS",PatternValues="-5,10,12,,0,1,7")
NewPatternTimeSeries(Alias="ts2",NewTSID="ts2..Example.Day",Description="Test data 2 - double properties",SetStart="1950-01-01",SetEnd="1952-05-12",Units="CFS",PatternValues="-1,0,30,,1,7,9")
NewPatternTimeSeries(Alias="ts3",NewTSID="ts3..Example.Day",Description="Test data 3 - string properties",SetStart="1950-01-01",SetEnd="1952-05-12",Units="CFS",PatternValues="-1,0,30,,4,7,1")
# Define time series properties to test for formatting
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="ts1",PropertyName="Integer1",PropertyType=Integer,PropertyValue="1")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="ts2",PropertyName="Double1",PropertyType=Double,PropertyValue="1")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="ts3",PropertyName="StringOne",PropertyType=String,PropertyValue="StringOne")
SetTimeSeriesProperty(TSList=AllMatchingTSID,TSID="ts3",PropertyName="OneString",PropertyType=String,PropertyValue="OneString")
ReadTableFromDelimitedFile(TableID="StyleTable",InputFile="Data\StyleTable.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_EQ_Missing",InputFile="Data\ConditionTable-Column-EQ-Missing.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_EQ",InputFile="Data\ConditionTable-Column-EQ.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_LT",InputFile="Data\ConditionTable-Column-LT.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_LE",InputFile="Data\ConditionTable-Column-LE.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_GT",InputFile="Data\ConditionTable-Column-GT.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_GE",InputFile="Data\ConditionTable-Column-GE.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_contains",InputFile="Data\ConditionTable-Column-contains.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_startswith",InputFile="Data\ConditionTable-Column-startswith.csv")
ReadTableFromDelimitedFile(TableID="ConditionTable_endswith",InputFile="Data\ConditionTable-Column-endswith.csv")
# Uncomment the following command to regenerate the expected results file.
# WriteTimeSeriesToExcel(OutputFile="ExpectedResults\Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_out.dv")
# Generate new output - for "== missing" condition
SetDebugLevel(LogFileLevel=1)
# WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_EQ_Missing_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnCommentWidth="1",ColumnCommentHeight="2",CommentWidth="3",CommentHeight="4",ColumnConditionTableID="ConditionTable_Missing",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_EQ_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_EQ",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_LT_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_LT",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_LE_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_LE",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_GT_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_GT",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_GE_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_GE",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_contains_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_contains",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_startswith_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_startswith",ColumnStyleTableID="StyleTable")
WriteTimeSeriesToExcel(MissingValue=Blank,OutputFile="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_endswith_out.xlsx",Worksheet="DayInterval",ExcelAddress="A1",ColumnComment="${ts:Integer1} ${ts:Double1} ${ts:StringOne} ${ts:OneString}",ColumnConditionTableID="ConditionTable_endswith",ColumnStyleTableID="StyleTable")
SetDebugLevel(LogFileLevel=0)
# TODO SAM 2015-07-05 Do regression comparison...
# CompareFiles(InputFile1="ExpectedResults/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_out.dv",InputFile2="Results/Test_WriteTimeSeriesToExcel_Day_StyleFormat_Heading_out.dv",IfDifferent=Warn)
