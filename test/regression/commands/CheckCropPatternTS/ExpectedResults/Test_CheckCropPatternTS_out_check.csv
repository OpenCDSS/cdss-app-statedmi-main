#HeaderRevision 0
#
# File generated by...
# program:      StateDMI 3.07.00 (2009-05-11)
# user:         sam
# date:         Mon May 11 05:05:19 MDT 2009
# host:         SOPRIS
# directory:    C:\Develop\StateDMI_SourceBuild\StateDMI\test\regression\commands\CheckCropPatternTS
# command line: StateDMI -home test\operational\CDSS
#----
# 
# StateDMI check file containing all warning/failure messages from run.
# 
# -----------------------------------------------------------------------
# Command file name: "C:\Develop\StateDMI_SourceBuild\StateDMI\test\regression\commands\CheckCropPatternTS\Test_CropPatternTS.StateDMI"
# Commands: 
# # Test checking crop pattern time series data where some values are in error
# # The set command won't let invalid data be set from parameters so use
# # values in a StateCU input file to trigger the check warnings.
# # Compare the data csv to make sure the data are being produced as expected
# # and the check file csv to make sure the checks are working.
# # The expected status is Warning because the check will detect the missing values.
# #@expectedStatus Warning
# StartLog(LogFile="Results/Test_CheckCropPatternTS.StateDMI.log")
# RemoveFile(InputFile="Results\Test_CheckCropPatternTS_out.csv",IfNotFound=Ignore)
# RemoveFile(InputFile="Results\Test_CheckCropPatternTS_out.html",IfNotFound=Ignore)
# ReadCropPatternTSFromStateCU(InputFile="Data\simple.cds")
# # Uncomment the following command to regenerate the expected results.
# WriteCropPatternTSToStateCU(OutputFile="ExpectedResults/Test_CheckCropPatternTS_out.cds")
# WriteCropPatternTSToStateCU(OutputFile="Results/Test_CheckCropPatternTS_out.cds")
# CompareFiles(InputFile1="ExpectedResults/Test_CheckCropPatternTS_out.cds",InputFile2="Results/Test_CheckCropPatternTS_out.cds",WarnIfDifferent=True)
# #
# # Check the data and create the check file.
# CheckCropPatternTS(ID="*")
# # Uncomment the following command to regenerate the expected results.
# WriteCheckFile(OutputFile="ExpectedResults/Test_CheckCropPatternTS_out_check.csv")
# WriteCheckFile(OutputFile="Results/Test_CheckCropPatternTS_out_check.csv")
# WriteCheckFile(OutputFile="Results/Test_CheckCropPatternTS_out_check.html")
# CompareFiles(InputFile1="ExpectedResults/Test_CheckCropPatternTS_out_check.csv",InputFile2="Results/Test_CheckCropPatternTS_out_check.csv",WarnIfDifferent=True)
# 
# -----------------------------------------------------------------------------
# HydroBase database is: HydroBase on hbserver
# HydroBase.db_version:  design version: 20080701  last data change: 20080901
# HydroBase table structure for software is at least 2007052520070525
# HydroBase input name is "".
# Stored procedures are being used.
# -----------------------------------------------------------------------------
# 
#------------------------------------------------
"Severity","Type","Command","Problem","Recommendation"
WARNING,CommandRun,"CheckCropPatternTS(ID=""*"")","Location ""360645"" year 2002 total area (-355.962) is invalid.","Verify that crop areas are >= 0 for year."
WARNING,CommandRun,"CheckCropPatternTS(ID=""*"")","Location ""360645"" crop ""GRASS_PASTURE"" year 2002 area (-355.962) is invalid.","Verify that crop area is >= 0 for year."
WARNING,CommandRun,"CheckCropPatternTS(ID=""*"")","Location ""360645"" year 2003 total area (-355.962) is invalid.","Verify that crop areas are >= 0 for year."
WARNING,CommandRun,"CheckCropPatternTS(ID=""*"")","Location ""360645"" crop ""GRASS_PASTURE"" year 2003 area (-355.962) is invalid.","Verify that crop area is >= 0 for year."
