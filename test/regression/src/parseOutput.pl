#!/usr/bin/perl

##################################################################
# Author: Kurt Tometich
# Date: 2006-12-17
# 
# Purpose: This perl program parses the output from running 
#          a commands file in StateDMI.  The ant target "regTest"
#          runs StateDMI, copies the output file to the results
#          folder and runs this Perl script to generate the
#          final result of the commands run by StateDMI.  This
#          was needed since there is too much output generated
#          by StateDMI to sift through when tests are done running.
#          If a test fails, then the developer should check the
#          result log file generated by StateDMI in the Regression
#          results folder.  
#
##################################################################

#### get the date ####
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday) = localtime(); 
$year+=1900;
$mon+=1;

if($mon < 10)
{
	$mon = "0" . "$mon";
}

if($mday < 10)
{
	$mday = "0" . "$mday";
}


$fname = "../results/Regression." . "$year" . "$mon" . "$mday" . ".log";
$flag = 0;
$command_count = 0;
$outcome = "PASS";
$numFail = 0;
$numPass = 0;
$totalCmds = 0;
$totalTime = 0;
$numComments = 0;

open(OUT, ">../results/Results.html") or die "cannot open file to write to because $! \n";
print OUT <<END;
<html>
<head>
<style>
th {background-color:#333399; color:white}
table {background-color:black}
td {background-color:#F0F0F0; color:black}
</style>
</head>
<body>
<center> <h2> Regression Results </h2> </center>
<hr>
<br>
<table border=1 cellpadding=3 cellspacing=3>
<tr>
<th> Number </th>
<th> Section </th>
<th> Test Case </th>
<th> Num Nested Cmds</th>
<th> Result </th>
</tr>
END

open(FILE, "$fname") or die "cannot open file:$fname because $!\n";
while(<FILE>)
{
	$line = $_;
	chomp($line);

	# start of commands 
	if($line =~ /Processing commands file/ || $flag == 1)
	{ 	
		$flag = 1;

		if($line =~ /#/)
		{
			$numComments++;
		}
		
		### get the command name if processing a command
		if($line =~ /Processing commands file/ )
		{
			$command_count++;
			@r_values = getCommandName($line);
			$section = $r_values[1];
			$cmd_name = $r_values[0];
			#print OUT "| $command_count |";
			$len = length($cmd_name);
			if($len < 8)
			{
				$cmd_name = "$cmd_name" . "  ";
			}
			
			print OUT "<tr>\n";
			print OUT "<td> $command_count </td>\n";
			print OUT "<td> $section </td>\n";
			print OUT "<td> $cmd_name </td> \n";
			
			#print OUT "\t$section\t|\t$cmd_name\t"; 
		}

		### find out how many commands and time taken to
		### run the commands
		if($line =~ /Processing [0-9][0-9]* command/)
		{
				$num_cmds = getNumCommands($line);	
				$totalCmds += $num_cmds;
						
				#print OUT "|\t$num_cmds\t\t\t";
		}

		### Check for warnings or errors
		if($line =~ /^Warning/ || $line =~ /^Error/)
		{
			$outcome = "FAIL";
			print OUT "<td> FAIL </td> </tr>";
			$numFail++;
			$flag = 0;
		}

		### sequence of commands is done, reset counters
		### so the next set of commands will start at zero
		if($line =~ /Success processing commands/)
		{
			#print "\n";
			$outcome = "PASS";
			$numPass++;
			print OUT "<td> $num_cmds </td> \n";
			print OUT "<td> PASS </td> </tr> \n";
			
			# reset values
			$flag = 0;
			$numComments = 0;
		}
	}
}


### print the totals ###
print OUT "</table> <br> \n";
print OUT "<h3> TOTALS </h3>\n";
print OUT "<table border=1 cellpadding=3 cellspacing=3> \n";
print OUT "<tr><th> Cmd Count </th> \n";
print OUT "<th> Total Nested Cmds </th> \n";
print OUT "<th> Pass/Fail Ratio </th></tr> \n";
print OUT "<tr><td> $command_count </td> \n";
print OUT "<td> $totalCmds </td> \n";
print OUT "<td> $numPass/$numFail </td></tr> \n";
print OUT "</table> \n";

#print OUT "\n TOTALS \n"; 
#print OUT "-------------------------------------------------------------------------------------------------------------\n";
#print OUT "| $command_count |\tN/A\     \t|\tN/A      \t|\t$totalCmds\t\t\t|\t$totalTime\t|\t$numPass/$numFail    \t|\n";
#print OUT "-------------------------------------------------------------------------------------------------------------\n";

close(OUT);
close(FILE);


#########################################
# Sub-routine: getCommandName()
# Function: manipulate the command name
#           and section found in the
#           output file from StateDMI to
#           a more readable format.
# 
# Return: array of section name and 
#         test name.
#########################################
sub getCommandName()
{
	my $param = $_;
	my @split_space = split(/ /, $param);
	my $length = @split_space;	
 	my $length--;	
	$file_name = $split_space[$length];
	my @split_slash;
	

	if($file_name =~ /\\/)
	{	
		@split_slash = split(/\\/, $file_name);
	}
	else
	{
		@split_slash = split(/\//, $file_name);
	}
	$length = @split_slash;
	$length--;
	my $test_name = $split_slash[$length];
	my $section = $split_slash[$length - 1];
	my $test = (split(/\./, $test_name))[0];
	
	## trim whitespace 
	$test =~ s/^\s+//;
	$test =~ s/\s+$//;
	$section =~ s/^\s+//;
	$section =~ s/\s+$//;

	my @result = ();
	push(@result, $test);
	push(@result, $section);
	
	return @result;
}

#########################################
# Sub-routine: getNumCommands()
# Function: find the number of commands
#           in the current commands file
#           being processed.
# 
# Return: integer number of commands.
#########################################
sub getNumCommands()
{
	my $param = $_;
	my @tmp = (split(/ /, $param));
    $length = @tmp;
    $length -= 2;
    $result = @tmp[$length];

	## trim whitespace 
	$result =~ s/^\s+//;
	$result =~ s/\s+$//;

	return $result;
}

#########################################
# Sub-routine: getTime()
# Function: find the time (usually in
#           seconds that StateDMI took to 
#           process the current commands.
# 
# Return: time in decimal format (seconds)
#########################################
sub getTime()
{
	my $param = $_;
	my $mult = (split(/ /, $param))[3];
	
	my $result = $mult;

	## trim whitespace 
	$result =~ s/^\s+//;
	$result =~ s/\s+$//;

	return $result;
}
